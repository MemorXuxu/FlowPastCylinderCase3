/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1806                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         CrankNicolson 0.7; // 0.5 - between first and second
                                       // 0.7 - good compromise
}

d2dt2Schemes
{
    default		Euler;
}

gradSchemes
{
    //default         Gauss linear;
    //grad(U)         Gauss linear;
    //default         leastSquares;
    // non-orthogonality 40~60
    //default         cellLimited  Gauss linear 0;  
    //grad(U)         cellLimited  Gauss linear 0.333; // non-orthogonality 40~60
    // non-orthogonality 60~70
    default         cellLimited  Gauss linear 0.5;  
    grad(U)         cellLimited  Gauss linear 0.5; 
    grad(p)         Gauss linear 0.333;

}

// upwind:first order accurate
// linearUpwind:second,bounded
// linear:second,unbounded
// vanLeer Minmod:second, bounded
// limitedLinear:second,unbounded,more stable than pure linear,4LES

divSchemes
{
    default         none;

    /*
    // - Stable but too diffusive - first order
    div(phi,U)                      Gauss upwind;
    div(phi,omega)                  Gauss upwind;
    div(phi,k)                      Gauss upwind;
    div((nuEff*dev2(T(grad(U)))))   Gauss linear;
    */
    
    // - Accurate and stable - second order
    
    div(phi,U)      Gauss linearUpwind grad(U);
    div(phi,omega)  Gauss linearUpwind default;
    div(phi,k)      Gauss linearUpwind default;
    div((nuEff*dev2(T(grad(U)))))     Gauss linear;
    
    // - Even accurate but oscillatory - second order
    /*    
    div(phi,U) Gauss linear;
    div(phi,omega) Gauss limitedLinear 1;
    div(phi,k) Gauss limitedLinear 1;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    */ 

    /*
    div(phi,U)      Gauss limitedLinearV 1 ;  // Accurate
//    div(phi,U)      Gauss linearUpwind grad(U) ;  // Accurate
//    div(phi,U)      Gauss LUST grad(U) ;  // Accurate

//    div(phi,U)      Gauss upwind ;    // Stable but diffuse
    div(phi,k)      Gauss upwind ;    // Stable but diffuse
    div(phi,omega)  Gauss upwind ;    // Stable but diffuse
//    div(phi,omega)  Gauss linearUpwind grad(U);    // Stable but diffuse
//    div(phi,k)      Gauss limitedLinear 1;  // Accurate
//    div(phi,omega)      Gauss limitedLinear 1;  // Accurate
    div(phi,epsilon) Gauss limitedLinear 1;  // Accurate
*/
    
/*
    div(phi,nuTilda) Gauss limitedLinear 1;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    // - Acoustic Physical Parameter
    div(coriolisAcc) Gauss linear;
    div((curl(U)^U)) Gauss linear;
    div((curl(uFluc)^U)) Gauss linear;
    div((curl(uFluc)^uFluc)) Gauss linear;
    div((curl(U)^uFluc)) Gauss linear;
    div((density*(curl(U)^U))) Gauss linear;
*/    
}

/*
divSchemes
{
    default         none;

    turbulence      Gauss linearUpwind default;
    energy          Gauss linearUpwind limited;

//    div(phi,U)      Gauss limitedLinearV 1;
    div(phi,U)        Gauss linearUpwind grad(U); //Stable
//    div(phi,U)      Gauss limitedLinearV 1;   //Accrucate
//    div(phi,U)      Gauss LUST grad(U) ;  // Accurate
//    div(phi,k)      Gauss upwind; //Stable 
//    div(phi,k)      bounded Gauss limitedLinear 1; //Stable 
    div(phi,k)          $turbulence;//bounded Gauss limitedLinear 1; //Stable 
    div(phi,omega)      $turbulence;//bounded Gauss limitedLinear 1; //Stable
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
}
*/

laplacianSchemes
{
    // - non-orthogonality
    // - less 70 : Gauss linear limited 1
    // - 70 and 85 : 0.5
    // - more than 85, remesh but : 0.333
    // - LES and DES : no brain to 1
    default         Gauss linear limited 1.0;//Gauss linear corrected;
}

snGradSchemes
{
    default     limited 1.0;
}

interpolationSchemes
{
    default         linear;
    //interpolate(U)  linear;
}


wallDist
{
    method meshWave;
}


// ************************************************************************* //
